//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Player.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILotoService")]
    public interface ILotoService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILotoService/CalculateLoto")]
        void CalculateLoto(int firstNumber, int secondNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILotoService/CalculateLoto")]
        System.Threading.Tasks.Task CalculateLotoAsync(int firstNumber, int secondNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILotoServiceChannel : Player.ServiceReference1.ILotoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LotoServiceClient : System.ServiceModel.ClientBase<Player.ServiceReference1.ILotoService>, Player.ServiceReference1.ILotoService {
        
        public LotoServiceClient() {
        }
        
        public LotoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LotoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CalculateLoto(int firstNumber, int secondNumber) {
            base.Channel.CalculateLoto(firstNumber, secondNumber);
        }
        
        public System.Threading.Tasks.Task CalculateLotoAsync(int firstNumber, int secondNumber) {
            return base.Channel.CalculateLotoAsync(firstNumber, secondNumber);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPlayerService", CallbackContract=typeof(Player.ServiceReference1.IPlayerServiceCallback))]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerService/InitPlayer")]
        void InitPlayer(string playerName, int firstNumber, int secondNumber, int amount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerService/InitPlayer")]
        System.Threading.Tasks.Task InitPlayerAsync(string playerName, int firstNumber, int secondNumber, int amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerService/LotoResult")]
        void LotoResult(string playerName, int firstNumber, int secondNumber, int matches, int earnings, string leaderboard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerService/MessageArrived")]
        void MessageArrived(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : Player.ServiceReference1.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.DuplexClientBase<Player.ServiceReference1.IPlayerService>, Player.ServiceReference1.IPlayerService {
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InitPlayer(string playerName, int firstNumber, int secondNumber, int amount) {
            base.Channel.InitPlayer(playerName, firstNumber, secondNumber, amount);
        }
        
        public System.Threading.Tasks.Task InitPlayerAsync(string playerName, int firstNumber, int secondNumber, int amount) {
            return base.Channel.InitPlayerAsync(playerName, firstNumber, secondNumber, amount);
        }
    }
}
